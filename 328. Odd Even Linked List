/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
#include<vector>
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        
        if (!head || !head->next) return head; // Edge case: Empty or single-node list

        vector<int> arr;
        ListNode* temp = head;

        // Collecting odd-positioned elements
        while (temp && temp->next) {
            arr.push_back(temp->val);
            temp = temp->next->next;
        }
        if (temp) arr.push_back(temp->val); // If last odd node exists, add it

        temp = head->next; // Start from second node

        // Collecting even-positioned elements
        while (temp && temp->next) {
            arr.push_back(temp->val);
            temp = temp->next->next;
        }
        if (temp) arr.push_back(temp->val);

        
        temp = head;
        int i=0;

        while(temp != nullptr){
           temp -> val = arr[i];
           i++;
           temp = temp -> next;
        }
        return head;


        
    }
};  


-------------------------------------------------------------------------------------------------------------------


class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        
        if(!head || !head -> next){
           return head;
        }

        ListNode* odd = head;
        ListNode* even = head -> next;
        ListNode* evenhead = head -> next;

        while(even != nullptr && even -> next != nullptr){
            odd -> next = odd -> next -> next;
            even -> next = even -> next -> next;

            odd = odd -> next;
            even = even -> next;
        }

        odd -> next = evenhead;
        return head;

    }
};
