class Solution {
public:
    int largestInteger(int num) {
        vector<int> nums;
        while (num > 0) {
            nums.push_back(num % 10);
            num /= 10;
        }
        reverse(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> evens, odds;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 0) {
                evens.push_back(nums[i]);
            } else {
                odds.push_back(nums[i]);
            }
        }
        sort(evens.begin(), evens.end(), greater<int>());
        sort(odds.begin(), odds.end(), greater<int>());
        int evenIndex = 0, oddIndex = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 0) {
                nums[i] = evens[evenIndex++];
            } else {
                nums[i] = odds[oddIndex++];
            }
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            result = result * 10 + nums[i];
        }
        return result;
    }
};
