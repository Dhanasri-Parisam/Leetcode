
// xor method:
class Solution {
public:
    int singleNonDuplicate(vector<int>& arr) {
        int n=arr.size();
        int ans=0;
        for(int i=0;i<n;i++){
            ans^=arr[i];
        }
        return ans;
    }
};

//map:
class Solution {
public:
    int singleNonDuplicate(vector<int>& arr) {
        int n=arr.size();
        //base case 
        if (n == 1) return arr[0];
        map<int,int > mpp;
        for(auto it:arr){
           mpp[it]++;
        }
        for (const auto& entry : mpp) {
            if (entry.second == 1) {
                return entry.first;
            }
        }
        return -1;
    }
};

//left right middle :
class Solution {
public:
    int singleNonDuplicate(vector<int>& arr) {
        int n=arr.size();
        //base case 
        if (n == 1) return arr[0];
        //first
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (arr[i] != arr[i + 1])
                    return arr[i];
            }
        //Check for last index:
        else if (i == n - 1) {
            if (arr[i] != arr[i - 1])
                return arr[i];
        }
        else {
            if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1])
                return arr[i];
        }
    }
    return -1;   
    }
};
