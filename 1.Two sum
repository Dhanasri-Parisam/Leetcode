/*
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
*/

HASH MAP:
------------------------------------------------------------
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int>mpp;
        int n=nums.size();
        for(int i = 0; i < n; i++){
            int first=nums[i];
            int search=target-first;
            if(mpp.find(search)!=mpp.end()){
                return {mpp[search],i};
            }
            mpp[first]=i;
        }
        return {-1,-1};
    }
};

Two pointer aproch:
------------------------------------------------------------------------------
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n=nums.length;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]+nums[j]==target){
                   return new int[] {i, j};
                }
            }
        }
        return new int[] {};
    }
}
