class Solution {
    int maxi(const vector<int>& nums) {
        return *max_element(nums.begin(), nums.end());
    }
    bool cansplit(const vector<int>& nums, int mid, int maxOperations) {
        int cntoperation = 0; 
        for (int it : nums) {
            if (it > mid) {
                cntoperation += (it - 1) / mid; 
            }
            if (cntoperation > maxOperations) {
                return false; 
            }
        }
        return true;
    }
public:
    int minimumSize(vector<int>& nums, int maxOperations) {
        int n=nums.size();
        int low=1,high=maxi(nums),res=0;
        while(low<=high){
            int mid=(low+high)/2;
            if(cansplit(nums,mid,maxOperations)){
                res=mid;
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return res;

    }
};

