class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int currsum=nums[0];
        int maxi=nums[0];
        for(int i=1;i<nums.size();i++){
            currsum=max(nums[i],currsum+nums[i]);
            maxi=max(maxi,currsum);
        }
        return maxi;
    }
};
---------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxi=INT_MIN;
        int sum=0;
        int start=0,ansStart=-1,ansEnd=-1;
        for(int i=0;i<n;i++){
            if(sum==0) start=i;
            sum+=nums[i];
            if(sum>maxi){   //sum always update positive nums
                maxi=sum;
                ansStart=start;
                ansEnd=i;
            }
            if(sum<0){
                sum=0;   //any negitive sum will updated by 0
            }
        }
        return maxi;
    }
};

---------------------------------------------------------------------------------------------------------------------------------
long long maxSubarraySum(vector<int> arr, int n)
{
    // Write your code here.
    long long maxi=INT_MIN;  //something a big negitive value
    long long sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
        if(sum>maxi){ 
            maxi=sum;   //update every max value
        }
        if(sum<0){
            sum=0;
        }
      // particularly desined to [negitive values]
        if(maxi<0){  //[-1,-2,-3,-4]-->ans should be -1     
            maxi=0;
        }
    }
    return maxi;
}
