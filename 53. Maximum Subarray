class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int currsum=nums[0];
        int maxi=nums[0];
        for(int i=1;i<nums.size();i++){
            currsum=max(nums[i],currsum+nums[i]);
            maxi=max(maxi,currsum);
        }
        return maxi;
    }
};
---------------------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;

long long maxSubarraySum(int arr[], int n) {
    long long maxi = LONG_MIN; // maximum sum
    long long sum = 0;

    int start = 0;
    int ansStart = -1, ansEnd = -1;
    for (int i = 0; i < n; i++) {

        if (sum == 0) start = i; // starting index

        sum += arr[i];

        if (sum > maxi) {
            maxi = sum;

            ansStart = start;
            ansEnd = i;
        }

        // If sum < 0: discard the sum calculated
        if (sum < 0) {
            sum = 0;
        }
    }

    //printing the subarray:
    cout << "The subarray is: [";
    for (int i = ansStart; i <= ansEnd; i++) {
        cout << arr[i] << " ";
    }
    cout << "]n";

    // To consider the sum of the empty subarray
    // uncomment the following check:

    //if (maxi < 0) maxi = 0;

    return maxi;
}

int main()
{
    int arr[] = { -2, 1, -3, 4, -1, 2, 1, -5, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    long long maxSum = maxSubarraySum(arr, n);
    cout << "The maximum subarray sum is: " << maxSum << endl;
    return 0;
}


---------------------------------------------------------------------------------------------------------------------------------
long long maxSubarraySum(vector<int> arr, int n)
{
    // Write your code here.
    long long maxi=INT_MIN;  //something a big negitive value
    long long sum=0;
    for(int i=0;i<n;i++){
        sum+=arr[i];
        if(sum>maxi){ 
            maxi=sum;   //update every max value
        }
        if(sum<0){
            sum=0;
        }
      // particularly desined to [negitive values]
        if(maxi<0){  //[-1,-2,-3,-4]-->ans should be -1     
            maxi=0;
        }
    }
    return maxi;
}
