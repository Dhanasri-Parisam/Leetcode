/* TWO POINTERS TECHNIQUE */
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size();
        int n2=nums2.size();
        int n=(n1+n2);
        int i=0,j=0,cnt=0;
        int idxel1=-1,idxel2=-1;
        int idx2=n/2,idx1=n/2-1;
        while(i<n1 && j<n2){
            if(nums1[i]<nums2[j]){
            //'cnt is == arr1 last or arr2 first  store that element idxelements'
                if(cnt==idx1) idxel1=nums1[i];
                if(cnt==idx2) idxel2=nums1[i];
                cnt++;
                i++;
            }
            else{
                if(cnt==idx1) idxel1=nums2[j];
                if(cnt==idx2) idxel2=nums2[j];
                cnt++;
                j++;
            }
            
        }
        while(i<n1){
            if(cnt==idx1) idxel1=nums1[i];
            if(cnt==idx2) idxel2=nums1[i];
            cnt++;
            i++;
        }
        while(j<n2){
            if(cnt==idx1) idxel1=nums2[j];
            if(cnt==idx2) idxel2=nums2[j];
            cnt++;
            j++;
        }
        if (n % 2 == 1) {
        return (double)idxel2;
    }
    return (double)((double)(idxel1 + idxel2)) / 2.0;
    }
};

/* TEMPRARY VARIABLE TRACK OF STORING ALL VALUES */

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        int i = 0, j = 0;
        vector<int> nums3;
        while (i < n1 && j < n2) {
            if (nums1[i] < nums2[j]) {
                nums3.push_back(nums1[i++]);
            } else {
                nums3.push_back(nums2[j++]);
            }
        }
        while (i < n1) nums3.push_back(nums1[i++]);
        while (j < n2) nums3.push_back(nums2[j++]);

        int n = n1 + n2;
        if (n % 2 == 1) {
            return nums3[n / 2];
        }
        return (double)(nums3[n / 2] + nums3[n / 2 - 1]) / 2.0;
    }
};
