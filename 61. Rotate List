class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (!head || !head->next || k == 0) return head;

        // Step 1: Compute the length of the list
        ListNode* tail = head;
        int len = 1;
        while (tail->next) {
            tail = tail->next;
            len++;
        } 

        // Step 2: Connect tail to head (make it circular)
        tail->next = head;

        // Step 3: Find new head after rotation
        k = k % len;  // Handle cases where k >= len
        int diff = len - k; 

        // Move to the node just before the new head
        ListNode* temp = head;
        for (int i = 1; i < diff; i++) {
            temp = temp->next;
        }

        // Step 4: Set new head and break the cycle
        ListNode* newHead = temp->next;
        temp->next = nullptr;  // Break the cycle

        return newHead;
    }
};
